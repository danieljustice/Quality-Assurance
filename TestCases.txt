IDENTIFIER:	Display-SwitchStay-Results-Test
TEST CASE: Test program that it can complete when given a basic input.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS: 
  1. Enter java -jar .\GoatGoatCar.jar good bad 101 5
  2. Enter java -jar .\GoatGoatCar.jar good bad 10000 1
  3. Enter java -jar .\GoatGoatCar.jar good bad 10000 10
  4. Enter java -jar .\GoatGoatCar.jar Goat Car 10000 100
POSTCONDITIONS: The switch stay result has been displayed to the user for each entry.

IDENTIFIER: SwitchStay-Accurate-Iterations-Test
TEST CASE: Ensures that as many iterations are being completed as the user specifies
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar good bad 101 1
  2. Enter java -jar .\GoatGoatCar.jar good bad 10000 1
  3. Enter java -jar .\GoatGoatCar.jar good bad 10000 10
  4. Enter java -jar .\GoatGoatCar.jar good bad 100000 100
POSTCONDITIONS: The user verifies that the iterations they entered equal the displayed iterations.

IDENTIFIER: Thread-Off-By-One-Test
TEST CASE: Ensures that threading is implemented correctly and that one thread is not bearing all the weight.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar good bad 101 1
  2. Enter java -jar .\GoatGoatCar.jar good bad 10000 10
  3. Enter java -jar .\GoatGoatCar.jar good bad 10000 9
  4. Enter java -jar .\GoatGoatCar.jar good bad 10000 8
POSTCONDITIONS: The user verifies that the iterations per thread is never off by more than one in comparison to other threads.

IDENTIFIER: Thread-Display-Test
TEST CASE: Ensures that there are as many threads as the user specifies.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar good bad 101 1
  2. Enter java -jar .\GoatGoatCar.jar good bad 10000 10
  3. Enter java -jar .\GoatGoatCar.jar good bad 10000 9
  4. Enter java -jar .\GoatGoatCar.jar good bad 10000 8000
POSTCONDITIONS: The user verifies that the iterations per thread is displayed for the correct thread count.

IDENTIFIER: Output-Has-Three-Decimals-Test
TEST CASE: Test to make sure outputs always have three decimal places of precision.  No more, no less.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar good bad 101 1
  2. Enter java -jar .\GoatGoatCar.jar good bad 10000 10
  3. Enter java -jar .\GoatGoatCar.jar good bad 10000 9
  4. Enter java -jar .\GoatGoatCar.jar good bad 10000 8
POSTCONDITIONS: The user verifies that the output display is rounded up to three decimal places.

IDENTIFIER:	Argument-Display-Test
TEST CASE: Ensures that the strings inputed for "Good" and "Bad" arguments are properly displayed.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar a b 101 1
  2. Enter java -jar .\GoatGoatCar.jar A B 101 1
  3. Enter java -jar .\GoatGoatCar.jar a a 101 1
  4. Enter java -jar .\GoatGoatCar.jar fafdasfdafdaaavaadvdavfadsv davfdafvafdavewqevadsafvesavfda 101 1
  5. Enter java -jar .\GoatGoatCar.jar !@#!afda134141 134124.143124.13431 101 1
POSTCONDITIONS: The user verifies that the output display contains the two passed in string versions of "Good" and "Bad". 

IDENTIFIER:	Missing-Args-Test
TEST CASE: Tests that if there are missing arguments then the program will prompt the user to input the correct arguments and then 
           gracefully terminate.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:  
  1. Enter java -jar .\GoatGoatCar.jar
  2. Enter java -jar .\GoatGoatCar.jar a 
  3. Enter java -jar .\GoatGoatCar.jar 1
  4. Enter java -jar .\GoatGoatCar.jar a b  
  5. Enter java -jar .\GoatGoatCar.jar a b 101 
POSTCONDITIONS: The system will display the useage information for the program and shut down.

IDENTIFIER:	Extra-Args-Test
TEST CASE: Tests that if there are extra arguments then the program will prompt the user to input the correct arguments and then 
           gracefully terminate.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS: 
  1. Enter java -jar .\GoatGoatCar.jar a b 101 1 c
  2. Enter java -jar .\GoatGoatCar.jar a b 101 1 2
  3. Enter java -jar .\GoatGoatCar.jar a b 101 1 2 c
POSTCONDITIONS: The system will display the useage information for the program and shut down.

IDENTIFIER: Counter-Invalid-Args-Test
TEST CASE: Ensures that the program can handle invalid arguments for the Counter Argument and exit gracefully.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS: 
  1. Enter java -jar .\GoatGoatCar.jar a b c 1
  2. Enter java -jar .\GoatGoatCar.jar a b 101.1 1
  3. Enter java -jar .\GoatGoatCar.jar a b 1000000000000000000 1
  4. Enter java -jar .\GoatGoatCar.jar a b -12314 1
POSTCONDITIONS: The program will notify the user of the invalid argument and why it is invalid. It will then exit.

IDENTIFIER: Thread-Invalid-Args-Test
TEST CASE: Ensures that the program can handle invalid arguments for the Counter Argument and exit gracefully.
PRECONDITIONS:The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar a b 101 c
  2. Enter java -jar .\GoatGoatCar.jar a b 101 101.1 
  3. Enter java -jar .\GoatGoatCar.jar a b 101 1000000000000000000
  4. Enter java -jar .\GoatGoatCar.jar a b 101 -12314
POSTCONDITIONS: The program will notify the user of the invalid argument and why it is invalid. It will then exit.

IDENTIFIER:Good-Invalid-Args-Test
TEST CASE: Ensure that the Good argument can handle potentially invalid args
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:  
  1. Enter java -jar .\GoatGoatCar.jar -1 bad 101 1
  2. Enter java -jar .\GoatGoatCar.jar 1.1 bad 101 1
  3. Enter java -jar .\GoatGoatCar.jar 1.1.1 bad 101 1
  4. Enter java -jar .\GoatGoatCar.jar \n bad 101 1
  5. Enter java -jar .\GoatGoatCar.jar System.out.print("woot") bad 101 1
  6. Enter java -jar .\GoatGoatCar.jar System.exit(0) bad 101 1
  7. Enter java -jar .\GoatGoatCar.jar 100000000000000000 bad 101 1
POSTCONDITIONS: The program will notify the user of the invalid argument and why it is invalid. It will then exit.

IDENTIFIER:Bad-Invalid-Args-Test
TEST CASE: Ensure that the Bad argument can handle potentially invalid args
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter java -jar .\GoatGoatCar.jar good -1 101 1
  2. Enter java -jar .\GoatGoatCar.jar good 1.1 101 1
  3. Enter java -jar .\GoatGoatCar.jar good 1.1.1 101 1
  4. Enter java -jar .\GoatGoatCar.jar good \n 101 1
  5. Enter java -jar .\GoatGoatCar.jar good System.out.print("woot") 101 1
  6. Enter java -jar .\GoatGoatCar.jar good System.exit(0) 101 1
  7. Enter java -jar .\GoatGoatCar.jar good 100000000000000000 101 1
POSTCONDITIONS: The program will notify the user of the invalid argument and why it is invalid. It will then exit.

IDENTIFIER: Small-Nums-Test
TEST CASE: Ensures that the program properly prompts the user if the number of iterations is 100 or less.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. The user inputs an "iterations" argument less than 100.
  2. The rest of the input for the program arrguments will be correct.
POSTCONDITIONS: The program shall issue a warning and ask the user if they wish to continue.

IDENTIFIER: Small-Num-Cont-Invalid-Input-Test
TEST CASE: Tests the small numbers warning prompt can handle invalid inputs whithout crashing.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter the correct command line arguments for GoodOption, BadOption, Threads, and enter in
     an iteration count of 100 or less. Example: Goat Car 98 5
  2. The user is prompted for "Y" or "N" input for continuing with less than 100 iterations.
  3. The user inputs invalid data for this option.
POSTCONDITIONS: Upon each invalid input, the program continues to ask the user for "Y" or "N" arguments.

IDENTIFIER: Small-Num-Cont-Valid-Input-Test
TEST CASE: Tests that the small numbers warning prompt handles each valid input appropriately.
PRECONDITIONS: The user has run the program.
EXECUTION STEPS:
  1. Enter the correct command line arguments for GoodOption, BadOption, Threads, and enter in
     an iteration count of 100 or less. Example: Goat Car 98 5
  2. The user is prompted for "Y" or "N" input for continuing with less than 100 iterations.
  3. The user inputs "Y","N","y",or "n" for this option. 
POSTCONDITIONS: 
  1. If the user selects "Y" or "y", the program will continue to execute.
  2. If the user selects "N" or "n", the program will exit.

IDENTIFIER: Thread-Perfomance-Test
TEST CASE: Test to ensure that program runs faster when more threads are used
PRECONDITIONS: The user has run the program.
EXECUTION STEPS: CURRENTLY UNSURE HOW TO APPROPRIATELY BLACK BOX TEST A SPEED COMPARISON
POSTCONDITIONS: Program exits gracefully with statistics correctly shown.


IDENTIFIER:
TEST CASE: 
PRECONDITIONS:
EXECUTION STEPS:
POSTCONDITIONS:
